
/* DO NOT EDIT - THIS FILE IS AUTOMATICALLY GENERATED */

"#define __VERSION__	100\n"
"#define GL_ES	1\n"
" \n"
"const mediump int gl_MaxVertexAttribs = 8; \n"
"const mediump int gl_MaxVertexUniformVectors = 128; \n"
"const mediump int gl_MaxVaryingVectors = 8; \n"
"const mediump int gl_MaxVertexTextureImageUnits = 0; \n"
"const mediump int gl_MaxCombinedTextureImageUnits = 8; \n"
"const mediump int gl_MaxTextureImageUnits = 8; \n"
"const mediump int gl_MaxFragmentUniformVectors = 16; \n"
"const mediump int gl_MaxDrawBuffers = 1;\n"
"struct gl_DepthRangeParameters { \n"
"highp float near;\n"
" highp float far;\n"
" highp float diff;\n"
"}; \n"
"uniform gl_DepthRangeParameters gl_DepthRange;\n"
"float radians(float degrees) {\n"
"	const float c = 3.1415926/180.0;\n"
"	\n"
"__mul	__retval, degrees, c\n"
"}\n"
"vec2 radians(vec2 degrees) {\n"
"	const float c = 3.1415926/180.0;\n"
"	__mul	__retval.xy, degrees.xy, vec2(c, c)\n"
"}\n"
"vec3 radians(vec3 degrees) {\n"
"	const float c = 3.1415926/180.0;\n"
"	__mul	__retval.xyz, degrees.xyz, vec3(c, c, c)\n"
"}\n"
"vec4 radians(vec4 degrees) {\n"
"	const float c = 3.1415926/180.0;\n"
"	__mul	__retval, degrees, vec4(c, c, c, c)\n"
"}\n"
"float degrees(float degrees) {\n"
"	const float c = 180.0/3.1415926;\n"
"	__mul	__retval, degrees, c\n"
"}\n"
"vec2 degrees(vec2 degrees) {\n"
"	const float c = 180.0/3.1415926;\n"
"	__mul	__retval.xy, degrees.xy, vec2(c, c)\n"
"}\n"
"vec3 degrees(vec3 degrees) {\n"
"	const float c = 180.0/3.1415926;\n"
"	__mul	__retval.xyz, degrees.xyz, vec3(c, c, c)\n"
"}\n"
"vec4 degrees(vec4 degrees) {\n"
"	const float c = 180.0/3.1415926;\n"
"	__mul	__retval, degrees, vec4(c, c, c, c)\n"
"}\n"
"float sin(float degrees) {\n"
"	__sin	__retval, degrees;\n"
"}\n"
"vec2 sin(vec2 degrees) {\n"
"	__sin	__retval.x, degrees.x;\n"
"	__sin	__retval.y, degrees.y;\n"
"}\n"
"vec3 sin(vec3 degrees) {\n"
"	__sin	__retval.x, degrees.x;\n"
"	__sin	__retval.y, degrees.y;\n"
"	__sin	__retval.z, degrees.z\n"
"}\n"
"vec4 sin(vec4 degrees) {\n"
"	__sin	__retval.x, degrees.x;\n"
"	__sin	__retval.y, degrees.y;\n"
"	__sin	__retval.z, degrees.z;\n"
"	__sin	__retval.w, degrees.w;\n"
"}\n"
"float cos(float degrees) {\n"
"	__cos	__retval, degrees;\n"
"}\n"
"vec2 cos(vec2 degrees) {\n"
"	__cos	__retval.x, degrees.x;\n"
"	__cos	__retval.y, degrees.y;\n"
"}\n"
"vec3 cos(vec3 degrees) {\n"
"	__cos	__retval.x, degrees.x;\n"
"	__cos	__retval.y, degrees.y;\n"
"	__cos	__retval.z, degrees.z\n"
"}\n"
"vec4 cos(vec4 degrees) {\n"
"	__cos	__retval.x, degrees.x;\n"
"	__cos	__retval.y, degrees.y;\n"
"	__cos	__retval.z, degrees.z;\n"
"	__cos	__retval.w, degrees.w;\n"
"}\n"
"float tan(float degrees) {\n"
"	float	sine = sin(degrees);\n"
"	float	cosine = cos(degrees);\n"
"	return	sine / cosine;\n"
"}\n"
"vec2 tan(vec2 degrees) {\n"
"	vec2	sine = sin(degrees);\n"
"	vec2	cosine = cos(degrees);\n"
"	return	sine / cosine;\n"
"}\n"
"vec3 tan(vec3 degrees) {\n"
"	vec3	sine = sin(degrees);\n"
"	vec3	cosine = cos(degrees);\n"
"	return	sine / cosine;\n"
"}\n"
"vec4 tan(vec4 degrees) {\n"
"	vec4	sine = sin(degrees);\n"
"	vec4	cosine = cos(degrees);\n"
"	return	sine / cosine;\n"
"}\n"
"float abs(float degrees);\n"
"float sqrt(float value);\n"
"float sign(float value);\n"
"float asin(float degrees) {\n"
"	const float a0 = 1.5707288; // PI/2?\n"
"	const float a1 = -0.2121144;\n"
"	const float a2 = 0.0742610;\n"
"	\n"
"float y = abs(degrees);\n"
"	return (a0 - sqrt(1.0 - y) * (a0 + y * (a1 + a2 * y))) * sign(degrees);\n"
"}\n"
"vec2 asin(vec2 degrees) {\n"
"	__retval.x = asin(degrees.x);\n"
"	__retval.y = asin(degrees.y);\n"
"}\n"
"vec3 asin(vec3 degrees) {\n"
"	__retval.x = asin(degrees.x);\n"
"	__retval.y = asin(degrees.y);\n"
"	__retval.z = asin(degrees.z);\n"
"}\n"
"vec4 asin(vec4 degrees) {\n"
"	__retval.x = asin(degrees.x);\n"
"	__retval.y = asin(degrees.y);\n"
"	__retval.z = asin(degrees.z);\n"
"	__retval.w = asin(degrees.w);\n"
"}\n"
"float acos(float degrees) {\n"
"	const float pi_over_2 = 1.5707288;\n"
"	return pi_over_2 - asin(degrees);\n"
"}\n"
"vec2 acos(vec2 degrees) {\n"
"	__retval.x = acos(degrees.x);\n"
"	__retval.y = acos(degrees.y);\n"
"}\n"
"vec3 acos(vec3 degrees) {\n"
"	__retval.x = acos(degrees.x);\n"
"	__retval.y = acos(degrees.y);\n"
"	__retval.z = acos(degrees.z);\n"
"}\n"
"vec4 acos(vec4 degrees) {\n"
"	__retval.x = acos(degrees.x);\n"
"	__retval.y = acos(degrees.y);\n"
"	__retval.z = acos(degrees.z);\n"
"	__retval.w = acos(degrees.w);\n"
"}\n"
"float inversesqrt(float value);\n"
"float atan(float degrees) {\n"
"	return asin(degrees * inversesqrt(degrees * degrees + 1.0)); \n"
"}\n"
"vec2 atan(vec2 degrees) {\n"
"	__retval.x = atan(degrees.x);\n"
"	__retval.y = atan(degrees.y);\n"
"}\n"
"vec3 atan(vec3 degrees) {\n"
"	__retval.x = atan(degrees.x);\n"
"	__retval.y = atan(degrees.y);\n"
"	__retval.z = atan(degrees.z);\n"
"}\n"
"vec4 atan(vec4 degrees) {\n"
"	__retval.x = atan(degrees.x);\n"
"	__retval.y = atan(degrees.y);\n"
"	__retval.z = atan(degrees.z);\n"
"	__retval.w = atan(degrees.w);\n"
"}\n"
"float atan(float y, float x) {\n"
"	if (x == 0.0) {\n"
"	return 0.0;\n"
"	}\n"
"	\n"
"float z = atan(y / x);\n"
"	\n"
"if (x < 0.0) {\n"
"	if (y < 0.0) {\n"
"	return z - 3.1415926;\n"
"	}\n"
"	\n"
"return z + 3.1415926;\n"
"	}\n"
"	\n"
"return z;\n"
"}\n"
"vec2 atan(vec2 y, vec2 x) {\n"
"	__retval.x = atan(y.x, x.x);\n"
"	__retval.y = atan(y.y, x.y);\n"
"}\n"
"vec3 atan(vec3 y, vec3 x) {\n"
"	__retval.x = atan(y.x, x.x);\n"
"	__retval.y = atan(y.y, x.y);\n"
"	__retval.z = atan(y.z, x.z);\n"
"}\n"
"vec4 atan(vec4 y, vec4 x) {\n"
"	__retval.x = atan(y.x, x.x);\n"
"	__retval.y = atan(y.y, x.y);\n"
"	__retval.z = atan(y.z, x.z);\n"
"	__retval.w = atan(y.w, x.w);\n"
"}\n"
"float pow(float x, float y) {\n"
"	__pow __retval, x, y\n"
"}\n"
"vec2 pow(vec2 x, vec2 y) {\n"
"	__pow __retval.x, x.x, y.x\n"
"	__pow __retval.y, x.y, y.y\n"
"}\n"
"vec3 pow(vec3 x, vec3 y) {\n"
"	__pow __retval.x, x.x, y.x\n"
"	__pow __retval.y, x.y, y.y\n"
"	__pow __retval.z, x.z, y.z\n"
"}\n"
"vec4 pow(vec4 x, vec4 y) {\n"
"	__pow __retval.x, x.x, y.x\n"
"	__pow __retval.y, x.y, y.y\n"
"	__pow __retval.z, x.z, y.z\n"
"	__pow __retval.w, x.w, y.w\n"
"}\n"
"float exp2(float x) {\n"
"	__ex2	__retval, x\n"
"}\n"
"vec2 exp2(vec2 x) {\n"
"	__ex2	__retval.x, x.x\n"
"	__ex2	__retval.y, x.y\n"
"}\n"
"vec3 exp2(vec3 x) {\n"
"	__ex2	__retval.x, x.x\n"
"	__ex2	__retval.y, x.y\n"
"	__ex2	__retval.z, x.z\n"
"}\n"
"vec4 exp2(vec4 x) {\n"
"	__ex2	__retval.x, x.x\n"
"	__ex2	__retval.y, x.y\n"
"	__ex2	__retval.z, x.z\n"
"	__ex2	__retval.w, x.w\n"
"}\n"
"float log2(float x) {\n"
"	__lg2	__retval, x\n"
"}\n"
"vec2 log2(vec2 x) {\n"
"	__lg2	__retval.x, x.x\n"
"	__lg2	__retval.y, x.y\n"
"}\n"
"vec3 log2(vec3 x) {\n"
"	__lg2	__retval.x, x.x\n"
"	__lg2	__retval.y, x.y\n"
"	__lg2	__retval.z, x.z\n"
"}\n"
"vec4 log2(vec4 x) {\n"
"	__lg2	__retval.x, x.x\n"
"	__lg2	__retval.y, x.y\n"
"	__lg2	__retval.z, x.z\n"
"	__lg2	__retval.w, x.w\n"
"}\n"
"float exp(float x) {\n"
"	const float e = 2.71828;\n"
"	\n"
"__pow __retval, e, x;\n"
"}\n"
"vec2 exp(vec2 x) {\n"
"	const float e = 2.71828;\n"
"	__pow __retval.x, e, x.x;\n"
"	__pow __retval.y, e, x.y;\n"
"}\n"
"vec3 exp(vec3 x) {\n"
"	const float e = 2.71828;\n"
"	__pow __retval.x, e, x.x;\n"
"	__pow __retval.y, e, x.y;\n"
"	__pow __retval.z, e, x.z;\n"
"}\n"
"vec4 exp(vec4 x) {\n"
"	const float e = 2.71828;\n"
"	__pow __retval.x, e, x.x;\n"
"	__pow __retval.y, e, x.y;\n"
"	__pow __retval.z, e, x.z;\n"
"	__pow __retval.w, e, x.w;\n"
"}\n"
"float log(float x) {\n"
"	const float c = 0.693147181;\n"
"	return log2(x) * c;\n"
"}\n"
"vec2 log(vec2 x) {\n"
"	const float c = 0.693147181;\n"
"	return log2(x) * c;\n"
"}\n"
"vec3 log(vec3 x) {\n"
"	const float c = 0.693147181;\n"
"	return log2(x) * c;\n"
"}\n"
"vec4 log(vec4 x) {\n"
"	const float c = 0.693147181;\n"
"	return log2(x) * c;\n"
"}\n"
"float sqrt(float x) {\n"
"	float	temp;\n"
"	__rsq	temp, x\n"
"	__rcp	__retval, temp\n"
"}\n"
"vec2 sqrt(vec2 x) {\n"
"	__retval.x = sqrt(x.x);\n"
"	__retval.y = sqrt(x.y);\n"
"}\n"
"vec3 sqrt(vec3 x) {\n"
"	__retval.x = sqrt(x.x);\n"
"	__retval.y = sqrt(x.y);\n"
"	__retval.z = sqrt(x.z);\n"
"}\n"
"vec4 sqrt(vec4 x) {\n"
"	__retval.x = sqrt(x.x);\n"
"	__retval.y = sqrt(x.y);\n"
"	__retval.z = sqrt(x.z);\n"
"	__retval.w = sqrt(x.w);\n"
"}\n"
"float inversesqrt(float x) {\n"
"	__rsq	__retval, x\n"
"}\n"
"vec2 inversesqrt(vec2 x) {\n"
"	__rsq	__retval.x, x.x\n"
"	__rsq	__retval.y, x.y\n"
"}\n"
"vec3 inversesqrt(vec3 x) {\n"
"	__rsq	__retval.x, x.x\n"
"	__rsq	__retval.y, x.y\n"
"	__rsq	__retval.z, x.z\n"
"}\n"
"vec4 inversesqrt(vec4 x) {\n"
"	__rsq	__retval.x, x.x\n"
"	__rsq	__retval.y, x.y\n"
"	__rsq	__retval.z, x.z\n"
"	__rsq	__retval.w, x.w\n"
"}\n"
"float abs(float x) {\n"
"	__abs	__retval, x\n"
"}\n"
"vec2 abs(vec2 x) {\n"
"	__abs	__retval, x\n"
"}\n"
"vec3 abs(vec3 x) {\n"
"	__abs	__retval, x\n"
"}\n"
"vec4 abs(vec4 x) {\n"
"	__abs	__retval, x\n"
"}\n"
"float sign(float x) {\n"
"	__ssg	__retval, x\n"
"}\n"
"vec2 sign(vec2 x) {\n"
"	__ssg	__retval, x\n"
"}\n"
"vec3 sign(vec3 x) {\n"
"	__ssg	__retval, x\n"
"}\n"
"vec4 sign(vec4 x) {\n"
"	__ssg	__retval, x\n"
"}\n"
"float floor(float x) {\n"
"	__flr	__retval, x\n"
"}\n"
"vec2 floor(vec2 x) {\n"
"	__flr	__retval, x\n"
"}\n"
"vec3 floor(vec3 x) {\n"
"	__flr	__retval, x\n"
"}\n"
"vec4 floor(vec4 x) {\n"
"	__flr	__retval, x\n"
"}\n"
"float ceil(float x) {\n"
"	return -floor(-x);\n"
"}\n"
"vec2 ceil(vec2 x) {\n"
"	return -floor(-x);\n"
"}\n"
"vec3 ceil(vec3 x) {\n"
"	return -floor(-x);\n"
"}\n"
"vec4 ceil(vec4 x) {\n"
"	return -floor(-x);\n"
"}\n"
"float fract(float x) {\n"
"	__frc	__retval, x\n"
"}\n"
"vec2 fract(vec2 x) {\n"
"	__frc	__retval, x\n"
"}\n"
"vec3 fract(vec3 x) {\n"
"	__frc	__retval, x\n"
"}\n"
"vec4 fract(vec4 x) {\n"
"	__frc	__retval, x\n"
"}\n"
"float mod(float x, float y) {\n"
"	float inv_y;\n"
"	\n"
"__rcp inv_y, y;\n"
"	\n"
"return x - y * floor(x * inv_y);\n"
"}\n"
"vec2 mod(vec2 x, float y) {\n"
"	float inv_y;\n"
"	\n"
"__rcp inv_y, y;\n"
"	\n"
"return x - y * floor(x * inv_y);\n"
"}\n"
"vec3 mod(vec3 x, float y) {\n"
"	float inv_y;\n"
"	\n"
"__rcp inv_y, y;\n"
"	\n"
"return x - y * floor(x * inv_y);\n"
"}\n"
"vec4 mod(vec4 x, float y) {\n"
"	float inv_y;\n"
"	\n"
"__rcp inv_y, y;\n"
"	\n"
"return x - y * floor(x * inv_y);\n"
"}\n"
"vec2 mod(vec2 x, vec2 y) {\n"
"	return vec2(mod(x.x, y.x), mod(x.y, y.y));\n"
"}\n"
"vec3 mod(vec3 x, vec3 y) {\n"
"	return vec3(mod(x.x, y.x), mod(x.y, y.y), mod(x.z, y.z));\n"
"}\n"
"vec4 mod(vec4 x, vec4 y) {\n"
"	return vec4(mod(x.x, y.x), mod(x.y, y.y), mod(x.z, y.z), mod(x.w, y.w));\n"
"}\n"
"float min(float x, float y) {\n"
"	__min	__retval, x, y\n"
"}\n"
"vec2 min(vec2 x, float y) {\n"
"	__min	__retval, x, vec2(y)\n"
"}\n"
"vec3 min(vec3 x, float y) {\n"
"	__min	__retval, x, vec3(y)\n"
"}\n"
"vec4 min(vec4 x, float y) {\n"
"	__min	__retval, x, vec4(y)\n"
"}\n"
"vec2 min(vec2 x, vec2 y) {\n"
"	__min	__retval, x, y\n"
"}\n"
"vec3 min(vec3 x, vec3 y) {\n"
"	__min	__retval, x, y\n"
"}\n"
"vec4 min(vec4 x, vec4 y) {\n"
"	__min	__retval, x, y\n"
"}\n"
"float max(float x, float y) {\n"
"	__max	__retval, x, y\n"
"}\n"
"vec2 max(vec2 x, float y) {\n"
"	__max	__retval, x, vec2(y)\n"
"}\n"
"vec3 max(vec3 x, float y) {\n"
"	__max	__retval, x, vec3(y)\n"
"}\n"
"vec4 max(vec4 x, float y) {\n"
"	__max	__retval, x, vec4(y)\n"
"}\n"
"vec2 max(vec2 x, vec2 y) {\n"
"	__max	__retval, x, y\n"
"}\n"
"vec3 max(vec3 x, vec3 y) {\n"
"	__max	__retval, x, y\n"
"}\n"
"vec4 max(vec4 x, vec4 y) {\n"
"	__max	__retval, x, y\n"
"}\n"
"float clamp(float x, float minVal, float maxVal) {\n"
"	return min(max(x, minVal), maxVal);\n"
"}\n"
"vec2 clamp(vec2 x, float minVal, float maxVal) {\n"
"	return min(max(x, minVal), maxVal);\n"
"}\n"
"vec3 clamp(vec3 x, float minVal, float maxVal) {\n"
"	return min(max(x, minVal), maxVal);\n"
"}\n"
"vec4 clamp(vec4 x, float minVal, float maxVal) {\n"
"	return min(max(x, minVal), maxVal);\n"
"}\n"
"vec2 clamp(vec2 x, vec2 minVal, vec2 maxVal) {\n"
"	return min(max(x, minVal), maxVal);\n"
"}\n"
"vec3 clamp(vec3 x, vec3 minVal, vec3 maxVal) {\n"
"	return min(max(x, minVal), maxVal);\n"
"}\n"
"vec4 clamp(vec4 x, vec4 minVal, vec4 maxVal) {\n"
"	return min(max(x, minVal), maxVal);\n"
"}\n"
"float mix(float x, float y, float a) {\n"
"	__lrp	__retval, x, y, a\n"
"}\n"
"vec2 mix(vec2 x, vec2 y, float a) {\n"
"	__lrp	__retval, x, y, vec2(a)\n"
"}\n"
"vec3 mix(vec3 x, vec3 y, float a) {\n"
"	__lrp	__retval, x, y, vec3(a)\n"
"}\n"
"vec4 mix(vec4 x, vec4 y, float a) {\n"
"	__lrp	__retval, x, y, vec4(a)\n"
"}\n"
"vec2 mix(vec2 x, vec2 y, vec2 a) {\n"
"	__lrp	__retval, x, y, a\n"
"}\n"
"vec3 mix(vec3 x, vec3 y, vec3 a) {\n"
"	__lrp	__retval, x, y, a\n"
"}\n"
"vec4 mix(vec4 x, vec4 y, vec4 a) {\n"
"	__lrp	__retval, x, y, a\n"
"}\n"
"float step(float edge, float x) {\n"
"	__sgt	__retval, x, edge\n"
"}\n"
"vec2 step(float edge, vec2 x) {\n"
"	__sgt	__retval, x, vec2(edge)\n"
"}\n"
"vec3 step(float edge, vec3 x) {\n"
"	__sgt	__retval, x, vec3(edge)\n"
"}\n"
"vec4 step(float edge, vec4 x) {\n"
"	__sgt	__retval, x, vec4(edge)\n"
"}\n"
"vec2 step(vec2 edge, vec2 x) {\n"
"	__sgt	__retval, x, edge\n"
"}\n"
"vec3 step(vec3 edge, vec3 x) {\n"
"	__sgt	__retval, x, edge\n"
"}\n"
"vec4 step(vec4 edge, vec4 x) {\n"
"	__sgt	__retval, x, edge\n"
"}\n"
"float smoothstep(float edge0, float edge1, float x)\n"
"{\n"
" float t = clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\n"
" return t * t * (3.0 - 2.0 * t);\n"
"}\n"
"vec2 smoothstep(vec2 edge0, vec2 edge1, vec2 v)\n"
"{\n"
" vec2 t = clamp((v - edge0) / (edge1 - edge0), 0.0, 1.0);\n"
" return t * t * (3.0 - 2.0 * t);\n"
"}\n"
"vec3 smoothstep(vec3 edge0, vec3 edge1, vec3 v)\n"
"{\n"
" vec3 t = clamp((v - edge0) / (edge1 - edge0), 0.0, 1.0);\n"
" return t * t * (3.0 - 2.0 * t);\n"
"}\n"
"vec4 smoothstep(vec4 edge0, vec4 edge1, vec4 v)\n"
"{\n"
" vec4 t = clamp((v - edge0) / (edge1 - edge0), 0.0, 1.0);\n"
" return t * t * (3.0 - 2.0 * t);\n"
"}\n"
"vec2 smoothstep(float edge0, float edge1, vec2 v)\n"
"{\n"
" vec2 t = clamp((v - edge0) / (edge1 - edge0), 0.0, 1.0);\n"
" return t * t * (3.0 - 2.0 * t);\n"
"}\n"
"vec3 smoothstep(float edge0, float edge1, vec3 v)\n"
"{\n"
" vec3 t = clamp((v - edge0) / (edge1 - edge0), 0.0, 1.0);\n"
" return t * t * (3.0 - 2.0 * t);\n"
"}\n"
"vec4 smoothstep(float edge0, float edge1, vec4 v)\n"
"{\n"
" vec4 t = clamp((v - edge0) / (edge1 - edge0), 0.0, 1.0);\n"
" return t * t * (3.0 - 2.0 * t);\n"
"}\n"
"float dot(float p0, float p1) {\n"
"	return p0 * p1;\n"
"}\n"
"float dot(vec2 p0, vec2 p1) {\n"
"	__dp2	__retval, p0, p1\n"
"}\n"
"float dot(vec3 p0, vec3 p1) {\n"
"	__dp3	__retval, p0, p1\n"
"}\n"
"float dot(vec4 p0, vec4 p1) {\n"
"	__dp4	__retval, p0, p1\n"
"}\n"
"float length(float x) {\n"
"	return abs(x);\n"
"}\n"
"float length(vec2 x) {\n"
"	return sqrt(dot(x, x));\n"
"}\n"
"float length(vec3 x) {\n"
"	return sqrt(dot(x, x));\n"
"}\n"
"float length(vec4 x) {\n"
"	return sqrt(dot(x, x));\n"
"}\n"
"float distance(float p0, float p1) {\n"
"	return abs(p1 - p0);\n"
"}\n"
"float distance(vec2 p0, vec2 p1) {\n"
"	return length(p1 - p0);\n"
"}\n"
"float distance(vec3 p0, vec3 p1) {\n"
"	return length(p1 - p0);\n"
"}\n"
"float distance(vec4 p0, vec4 p1) {\n"
"	return length(p1 - p0);\n"
"}\n"
"vec3 cross(vec3 x, vec3 y) {\n"
"	__xpd	__retval, x, y\n"
"}\n"
"float normalize(float x) {\n"
"	return 1.0;\n"
"}\n"
"vec2 normalize(vec2 x) {\n"
"	return x * inversesqrt(dot(x, x));\n"
"}\n"
"vec3 normalize(vec3 x) {\n"
"	return x * inversesqrt(dot(x, x));\n"
"}\n"
"vec4 normalize(vec4 x) {\n"
"	return x * inversesqrt(dot(x, x));\n"
"}\n"
"float faceforward(float N, float I, float Nref) {\n"
"	float d = dot(Nref, I), s;\n"
"	\n"
"__sgt s, 0.0, d\n"
"	\n"
"return mix(-N, N, s);\n"
"}\n"
"vec2 faceforward(vec2 N, vec2 I, vec2 Nref) {\n"
"	float d = dot(Nref, I), s;\n"
"	__sgt s, 0.0, d\n"
"	return mix(-N, N, s);\n"
"}\n"
"vec3 faceforward(vec3 N, vec3 I, vec3 Nref) {\n"
"	float d = dot(Nref, I), s;\n"
"	__sgt s, 0.0, d\n"
"	return mix(-N, N, s);\n"
"}\n"
"vec4 faceforward(vec4 N, vec4 I, vec4 Nref) {\n"
"	float d = dot(Nref, I), s;\n"
"	__sgt s, 0.0, d\n"
"	return mix(-N, N, s);\n"
"}\n"
"float reflect(float I, float N) {\n"
"	return I - 2.0 * dot(N, I) * N;\n"
"}\n"
"vec2 reflect(vec2 I, vec2 N) {\n"
"	return I - 2.0 * dot(N, I) * N;\n"
"}\n"
"vec3 reflect(vec3 I, vec3 N) {\n"
"	return I - 2.0 * dot(N, I) * N;\n"
"}\n"
"vec4 reflect(vec4 I, vec4 N) {\n"
"	return I - 2.0 * dot(N, I) * N;\n"
"}\n"
"float refract(float I, float N, float eta) {\n"
"	float k = 1.0 - eta * eta * (1.0 - dot(N, I) * dot(N, I));\n"
"	\n"
"if (k < 0.0) {\n"
"	return 0.0;\n"
"	} else {\n"
"	return eta * I - (eta * dot(N, I) + sqrt(k)) * N;\n"
"	}\n"
"}\n"
"vec2 refract(vec2 I, vec2 N, float eta) {\n"
"	float k = 1.0 - eta * eta * (1.0 - dot(N, I) * dot(N, I));\n"
"	\n"
"if (k < 0.0) {\n"
"	return vec2(0.0);\n"
"	} else {\n"
"	return eta * I - (eta * dot(N, I) + sqrt(k)) * N;\n"
"	}\n"
"}\n"
"vec3 refract(vec3 I, vec3 N, float eta) {\n"
"	float k = 1.0 - eta * eta * (1.0 - dot(N, I) * dot(N, I));\n"
"	\n"
"if (k < 0.0) {\n"
"	return vec3(0.0);\n"
"	} else {\n"
"	return eta * I - (eta * dot(N, I) + sqrt(k)) * N;\n"
"	}\n"
"}\n"
"vec4 refract(vec4 I, vec4 N, float eta) {\n"
"	float k = 1.0 - eta * eta * (1.0 - dot(N, I) * dot(N, I));\n"
"	\n"
"if (k < 0.0) {\n"
"	return vec4(0.0);\n"
"	} else {\n"
"	return eta * I - (eta * dot(N, I) + sqrt(k)) * N;\n"
"	}\n"
"}\n"
"bvec2 lessThan(vec2 x, vec2 y) {\n"
"	__slt	__retval, x, y\n"
"}\n"
"bvec3 lessThan(vec3 x, vec3 y) {\n"
"	__slt	__retval, x, y\n"
"}\n"
"bvec4 lessThan(vec4 x, vec4 y) {\n"
"	__slt	__retval, x, y\n"
"}\n"
"bvec2 lessThan(ivec2 x, ivec2 y) {\n"
"	__slt	__retval, x, y\n"
"}\n"
"bvec3 lessThan(ivec3 x, ivec3 y) {\n"
"	__slt	__retval, x, y\n"
"}\n"
"bvec4 lessThan(ivec4 x, ivec4 y) {\n"
"	__slt	__retval, x, y\n"
"}\n"
"bvec2 lessThanEqual(vec2 x, vec2 y) {\n"
"	__sle	__retval, x, y\n"
"}\n"
"bvec3 lessThanEqual(vec3 x, vec3 y) {\n"
"	__sle	__retval, x, y\n"
"}\n"
"bvec4 lessThanEqual(vec4 x, vec4 y) {\n"
"	__sle	__retval, x, y\n"
"}\n"
"bvec2 lessThanEqual(ivec2 x, ivec2 y) {\n"
"	__sle	__retval, x, y\n"
"}\n"
"bvec3 lessThanEqual(ivec3 x, ivec3 y) {\n"
"	__sle	__retval, x, y\n"
"}\n"
"bvec4 lessThanEqual(ivec4 x, ivec4 y) {\n"
"	__sle	__retval, x, y\n"
"}\n"
"bvec2 greaterThan(vec2 x, vec2 y) {\n"
"	__sgt	__retval, x, y\n"
"}\n"
"bvec3 greaterThan(vec3 x, vec3 y) {\n"
"	__sgt	__retval, x, y\n"
"}\n"
"bvec4 greaterThan(vec4 x, vec4 y) {\n"
"	__sgt	__retval, x, y\n"
"}\n"
"bvec2 greaterThan(ivec2 x, ivec2 y) {\n"
"	__sgt	__retval, x, y\n"
"}\n"
"bvec3 greaterThan(ivec3 x, ivec3 y) {\n"
"	__sgt	__retval, x, y\n"
"}\n"
"bvec4 greaterThan(ivec4 x, ivec4 y) {\n"
"	__sgt	__retval, x, y\n"
"}\n"
"bvec2 greaterThanEqual(vec2 x, vec2 y) {\n"
"	__sge	__retval, x, y\n"
"}\n"
"bvec3 greaterThanEqual(vec3 x, vec3 y) {\n"
"	__sge	__retval, x, y\n"
"}\n"
"bvec4 greaterThanEqual(vec4 x, vec4 y) {\n"
"	__sge	__retval, x, y\n"
"}\n"
"bvec2 greaterThanEqual(ivec2 x, ivec2 y) {\n"
"	__sge	__retval, x, y\n"
"}\n"
"bvec3 greaterThanEqual(ivec3 x, ivec3 y) {\n"
"	__sge	__retval, x, y\n"
"}\n"
"bvec4 greaterThanEqual(ivec4 x, ivec4 y) {\n"
"	__sge	__retval, x, y\n"
"}\n"
"bvec2 equal(vec2 x, vec2 y) {\n"
"	__seq	__retval, x, y\n"
"}\n"
"bvec2 equal(ivec2 x, ivec2 y) {\n"
"	__seq	__retval, x, y\n"
"}\n"
"bvec2 equal(bvec2 x, bvec2 y) {\n"
"	__seq	__retval, x, y\n"
"}\n"
"bvec3 equal(vec3 x, vec3 y) {\n"
"	__seq	__retval, x, y\n"
"}\n"
"bvec3 equal(ivec3 x, ivec3 y) {\n"
"	__seq	__retval, x, y\n"
"}\n"
"bvec3 equal(bvec3 x, bvec3 y) {\n"
"	__seq	__retval, x, y\n"
"}\n"
"bvec4 equal(vec4 x, vec4 y) {\n"
"	__seq	__retval, x, y\n"
"}\n"
"bvec4 equal(ivec4 x, ivec4 y) {\n"
"	__seq	__retval, x, y\n"
"}\n"
"bvec4 equal(bvec4 x, bvec4 y) {\n"
"	__seq	__retval, x, y\n"
"}\n"
"bvec2 notEqual(vec2 x, vec2 y) {\n"
"	__sne	__retval, x, y\n"
"}\n"
"bvec2 notEqual(ivec2 x, ivec2 y) {\n"
"	__sne	__retval, x, y\n"
"}\n"
"bvec2 notEqual(bvec2 x, bvec2 y) {\n"
"	__sne	__retval, x, y\n"
"}\n"
"bvec3 notEqual(vec3 x, vec3 y) {\n"
"	__sne	__retval, x, y\n"
"}\n"
"bvec3 notEqual(ivec3 x, ivec3 y) {\n"
"	__sne	__retval, x, y\n"
"}\n"
"bvec3 notEqual(bvec3 x, bvec3 y) {\n"
"	__sne	__retval, x, y\n"
"}\n"
"bvec4 notEqual(vec4 x, vec4 y) {\n"
"	__sne	__retval, x, y\n"
"}\n"
"bvec4 notEqual(ivec4 x, ivec4 y) {\n"
"	__sne	__retval, x, y\n"
"}\n"
"bvec4 notEqual(bvec4 x, bvec4 y) {\n"
"	__sne	__retval, x, y\n"
"}\n"
"bool any(bvec2 x) {\n"
"	float sum;\n"
"	\n"
"__add sum, x.x, x.y;\n"
"	__sne __retval, sum, 0.0;\n"
"}\n"
"bool any(bvec3 x) {\n"
"	float sum;\n"
"	__add sum, x.x, x.y;\n"
"	__add	sum, sum, x.z\n"
"	__sne __retval, sum, 0.0;\n"
"}\n"
"bool any(bvec4 x) {\n"
"	float sum;\n"
"	__add sum, x.x, x.y;\n"
"	__add	sum, sum, x.z\n"
"	__add	sum, sum, x.w\n"
"	__sne __retval, sum, 0.0;\n"
"}\n"
"bool all(bvec2 x) {\n"
"	float prod;\n"
"	\n"
"__mul	prod, x.x, x.y;\n"
"	__sne __retval, prod, 0.0;\n"
"}\n"
"bool all(bvec3 x) {\n"
"	float prod;\n"
"	__mul	prod, x.x, x.y;\n"
"	__mul	prod, prod, x.z\n"
"	__sne __retval, prod, 0.0;\n"
"}\n"
"bool all(bvec4 x) {\n"
"	float prod;\n"
"	__mul	prod, x.x, x.y;\n"
"	__mul	prod, prod, x.z\n"
"	__mul	prod, prod, x.w\n"
"	__sne __retval, prod, 0.0;\n"
"}\n"
"bvec2 not(bvec2 x) {\n"
"	const bvec2	zero = bvec2(false, false);\n"
"	\n"
"__seq	__retval, x, zero\n"
"}\n"
"bvec3 not(bvec3 x){\n"
"	const bvec3	zero = bvec3(false, false, false);\n"
"	__seq	__retval, x, zero\n"
"}\n"
"bvec4 not(bvec4 x) {\n"
"	const bvec4	zero = bvec4(false, false, false, false);\n"
"	__seq	__retval, x, zero\n"
"}\n"
"vec4 texture2D(sampler2D sampler, vec2 coord) {\n"
"	__tex	__retval, coord, sampler\n"
"}\n"
"vec4 texture2DProj(sampler2D sampler, vec3 coord) {\n"
"	__txp	__retval, coord.xyxz, sampler\n"
"}\n"
"vec4 texture2DProj(sampler2D sampler, vec4 coord) {\n"
"	__txp	__retval, coord, sampler\n"
"}\n"
"vec4 texture3D(sampler3D sampler, vec3 coord)\n"
"{\n"
"	__tex __retval, coord, sampler\n"
"}\n"
"vec4 texture3DProj(sampler3D sampler, vec4 coord)\n"
"{\n"
" __txp	__retval, coord, sampler\n"
"}\n"
"vec4 textureCube (samplerCube sampler, vec3 coord) {\n"
"	__tex	__retval, coord, sampler\n"
"}\n"
""
